Object subclass: #MyObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyObject class	instanceVariableNames: ''!!MyObject class methodsFor: 'MyClassMethods' stamp: 'EK 12/11/2021 17:55'!compile: aSourceCode where: anOrderedCollection	"compile sourceCode and verify constraints"	| args selectors first_line parsed_line cnt args_present |		selectors := OrderedCollection new.	"if there;s no conts. - there's no params and so we can skip this"	((anOrderedCollection size) > 0)		ifTrue: [			args_present := True.			args := OrderedCollection new.			first_line := ((aSourceCode lines) at: 1).			parsed_line := first_line asString findBetweenSubStrs: (' ', ':').			cnt := 1.						parsed_line do: [ :itr | (cnt \\ 2 == 1)								ifTrue: [selectors add: itr.]								ifFalse: [args add: itr.].								cnt := cnt+1.							].			( (anOrderedCollection size) == (args size) )				ifFalse: [					Transcript show: 'exception for length';cr. "exception" 				].							"prepare for methed generating"			 selectors replace: [ :itr | (itr asString, ':').].					]		ifFalse: [			selectors add: ((aSourceCode lines) at: 1).		].			"------code generating------------"				"if args_present==True use this:					cnt := 1.			[cnt <= args size]				whileTrue: 					[							Transcript show: (args at: cnt) class name; cr.						((args at: cnt) isKindOf: (anOrderedCollection at: cnt))							ifFalse: [exception!!!!!!!! ].						cnt := cnt + 1					]				"				Transcript show: selectors asArray; cr.		Transcript show: args asArray; cr.	! !