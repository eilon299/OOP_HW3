Object subclass: #MyObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!MyObject methodsFor: 'initialize-release' stamp: 'EK 12/11/2021 19:01'!initialize! !!MyObject methodsFor: 'as yet unclassified' stamp: 'EK 12/12/2021 11:33'!foo: a bar: b baz: c | var1 | (a isKindOf: Integer)ifFalse: [AssertionFailure signal: 'Type mismatch!! Argument 1 should be Integer'].(c isKindOf: Number)ifFalse: [AssertionFailure signal: 'Type mismatch!! Argument 3 should be Number'].var1 := a + c + (2 * b)."just a comment, nothing special" ^ (var1 * var1)! !!MyObject methodsFor: 'as yet unclassified' stamp: 'EK 12/11/2021 19:05'!method1| |Transcript show:1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyObject class	instanceVariableNames: ''!!MyObject class methodsFor: 'MyClassMethods' stamp: 'EK 12/12/2021 11:33'!compile: aSourceCode where: anOrderedCollection	"compile sourceCode and verify constraints"	| args selectors first_line parsed_line lines cnt new_code validation_code local constraint |		selectors := OrderedCollection new.	lines := aSourceCode lines.	"if there's no conts. - there's no params and so we can skip this"	((anOrderedCollection size) > 0)		ifTrue: [			args := OrderedCollection new.			first_line := (aSourceCode lineNumber: 1).			parsed_line := first_line asString findBetweenSubStrs: (' ', ':').			cnt := 1.						parsed_line do: [ :itr | (cnt \\ 2 == 1)								ifTrue: [selectors add: itr.]								ifFalse: [args add: itr.].								cnt := cnt+1.							].			( (anOrderedCollection size) == (args size) )				ifFalse: [					AssertionFailure signal: 'Can not compile method, number of arguments is not equal to the number of constraints!!'. 				].							cnt := 1.			validation_code := ''.			[cnt <= args size]				whileTrue: 				[						((anOrderedCollection at: cnt) ~= nil)						ifTrue: [									constraint := ((anOrderedCollection at: cnt) asString).									local := '(', ((args at: cnt) asString), ' isKindOf: ', constraint, ')', (String cr).									local := local, 'ifFalse: [AssertionFailure signal: ''Type mismatch!! Argument ', (cnt asString), ' should be ' , constraint, '''].', (String cr).									validation_code := validation_code, local.						].					cnt := cnt + 1.				].												((lines size >= 2) and: [(lines at: 2) withoutLeadingBlanks beginsWith: '|'])				ifTrue: [					new_code := ((lines at: 1), (String cr), (lines at: 2), (String cr), validation_code).					cnt := 3.				]				ifFalse: [					new_code := ((lines at: 1), (String cr), validation_code).					cnt := 2.				].						[cnt <= lines size]				whileTrue: 				[						new_code := new_code, (String cr), (lines at: cnt).					cnt := cnt+1.				]		]					ifFalse: [			new_code := aSourceCode.		].		^super compile: new_code.						"Transcript show: selectors asArray; cr.		Transcript show: args asArray; cr."	! !